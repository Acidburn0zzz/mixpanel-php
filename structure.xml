<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="Mixpanel PHP API Reference">
  <file path="Base/MixpanelBase.php" hash="4a4e4145567c6ad0e8a8175a55ab7cc6" package="Default">
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends/>
      <name>Base_MixpanelBase</name>
      <full_name>\Base_MixpanelBase</full_name>
      <docblock line="3">
        <description>This a Base class which all Mixpanel classes extend from to provide some very basic
debugging and logging functionality.</description>
        <long-description>&lt;p&gt;It also serves to persist $_options across the library.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$_defaults</name>
        <default>array("max_batch_size" =&gt; 50, "max_queue_size" =&gt; 1000, "debug" =&gt; false, "consumer" =&gt; "socket", "host" =&gt; "api.mixpanel.com", "events_endpoint" =&gt; "/track", "people_endpoint" =&gt; "/engage", "use_ssl" =&gt; true, "error_callback" =&gt; null)</default>
        <docblock line="11">
          <description>Default options that can be overridden via the $options constructor arg</description>
          <long-description/>
          <tag line="11" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="global" package="Default">
        <name>$_options</name>
        <default>array()</default>
        <docblock line="28">
          <description>An array of options to be used by the Mixpanel library.</description>
          <long-description/>
          <tag line="28" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="35">
          <description>Construct a new MixpanelBase object and merge custom options with defaults</description>
          <long-description/>
          <tag line="35" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="49" package="Default">
        <name>_log</name>
        <full_name>_log</full_name>
        <docblock line="45">
          <description>Log a message to PHP's error log</description>
          <long-description/>
          <tag line="45" name="param" description="" type="\" variable="$msg"/>
        </docblock>
        <argument line="49">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="61" package="Default">
        <name>_debug</name>
        <full_name>_debug</full_name>
        <docblock line="57">
          <description>Returns true if in debug mode, false if in production mode</description>
          <long-description/>
          <tag line="57" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Base/MixpanelBase.php</error>
    </parse_markers>
  </file>
  <file path="ConsumerStrategies/AbstractConsumer.php" hash="d37986f443422e91494b17719e76e719" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="global" line="7" package="Default">
      <extends>\Base_MixpanelBase</extends>
      <name>ConsumerStrategies_AbstractConsumer</name>
      <full_name>\ConsumerStrategies_AbstractConsumer</full_name>
      <docblock line="4">
        <description>Provides some base methods for use by a Consumer implementation</description>
        <long-description/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="9">
          <description>Creates a new AbstractConsumer</description>
          <long-description/>
          <tag line="9" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="13">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="28" package="Default">
        <name>_encode</name>
        <full_name>_encode</full_name>
        <docblock line="23">
          <description>Encode an array to be persisted</description>
          <long-description/>
          <tag line="23" name="param" description="" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="23" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="37" package="Default">
        <name>_handleError</name>
        <full_name>_handleError</full_name>
        <docblock line="32">
          <description>Handles errors that occur in a consumer</description>
          <long-description/>
          <tag line="32" name="param" description="" type="\" variable="$code"/>
          <tag line="32" name="param" description="" type="\" variable="$msg"/>
        </docblock>
        <argument line="37">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="37">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>persist</name>
        <full_name>persist</full_name>
        <docblock line="51">
          <description>Persist a batch of messages in whatever way the implementer sees fit</description>
          <long-description/>
          <tag line="51" name="param" description="an array of messages to consume" type="array" variable="$batch">
            <type by_reference="false">array</type>
          </tag>
          <tag line="51" name="return" description="success or fail" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$batch</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ConsumerStrategies/AbstractConsumer.php</error>
    </parse_markers>
  </file>
  <file path="ConsumerStrategies/CurlConsumer.php" hash="72cc83be48f20c464340a8f056f3165b" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\ConsumerStrategies_AbstractConsumer</extends>
      <name>ConsumerStrategies_CurlConsumer</name>
      <full_name>\ConsumerStrategies_CurlConsumer</full_name>
      <docblock line="4">
        <description>Consumes messages and sends them to a host/endpoint using cURL</description>
        <long-description/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="12" namespace="global" package="Default">
        <name>$_host</name>
        <default/>
        <docblock line="9">
          <description/>
          <long-description/>
          <tag line="9" name="var" description="the host to connect to (e.g. api.mixpanel.com)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="18" namespace="global" package="Default">
        <name>$_endpoint</name>
        <default/>
        <docblock line="15">
          <description/>
          <long-description/>
          <tag line="15" name="var" description="the host-relative endpoint to write to (e.g. /engage)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="24" namespace="global" package="Default">
        <name>$_timeout</name>
        <default/>
        <docblock line="21">
          <description/>
          <long-description/>
          <tag line="21" name="var" description="timeout the socket connection timeout in seconds" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$_protocol</name>
        <default/>
        <docblock line="27">
          <description/>
          <long-description/>
          <tag line="27" name="var" description="the protocol to use for the socket connection" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" namespace="global" package="Default">
        <name>$_fork</name>
        <default>null</default>
        <docblock line="33">
          <description/>
          <long-description/>
          <tag line="33" name="var" description="true to fork the cURL process or false to use PHP's cURL extension" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="39">
          <description>Creates a new CurlConsumer and assigns properties from the $options array</description>
          <long-description/>
          <tag line="39" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>persist</name>
        <full_name>persist</full_name>
        <docblock line="54">
          <description>Write to the given host/endpoint using either a forked cURL process or using PHP's cURL extension</description>
          <long-description/>
          <tag line="54" name="param" description="" type="array" variable="$batch">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$batch</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="81" package="Default">
        <name>_execute</name>
        <full_name>_execute</full_name>
        <docblock line="74">
          <description>Write using the cURL php extension</description>
          <long-description/>
          <tag line="74" name="param" description="" type="\" variable="$url"/>
          <tag line="74" name="param" description="" type="\" variable="$data"/>
          <tag line="74" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="74" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="81">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="115" package="Default">
        <name>_execute_forked</name>
        <full_name>_execute_forked</full_name>
        <docblock line="109">
          <description>Write using a forked cURL process</description>
          <long-description/>
          <tag line="109" name="param" description="" type="\" variable="$url"/>
          <tag line="109" name="param" description="" type="\" variable="$data"/>
          <tag line="109" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
        <argument line="115">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ConsumerStrategies/CurlConsumer.php</error>
    </parse_markers>
  </file>
  <file path="ConsumerStrategies/FileConsumer.php" hash="be7b85b9fbb9f013595fd69dabf91b68" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\ConsumerStrategies_AbstractConsumer</extends>
      <name>ConsumerStrategies_FileConsumer</name>
      <full_name>\ConsumerStrategies_FileConsumer</full_name>
      <docblock line="3">
        <description>Consumes messages and writes them to a file</description>
        <long-description/>
      </docblock>
      <property final="false" static="false" visibility="private" line="11" namespace="global" package="Default">
        <name>$_file</name>
        <default/>
        <docblock line="8">
          <description/>
          <long-description/>
          <tag line="8" name="var" description="path to a file that we want to write the messages to" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="14">
          <description>Creates a new FileConsumer and assigns properties from the $options array</description>
          <long-description/>
          <tag line="14" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="18">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>persist</name>
        <full_name>persist</full_name>
        <docblock line="26">
          <description>Append $batch to a file</description>
          <long-description/>
          <tag line="26" name="param" description="" type="array" variable="$batch">
            <type by_reference="false">array</type>
          </tag>
          <tag line="26" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$batch</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ConsumerStrategies/FileConsumer.php</error>
    </parse_markers>
  </file>
  <file path="ConsumerStrategies/SocketConsumer.php" hash="2d2edacde454027add89929865a076a3" package="Default">
    <include line="34" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Portions of this class were borrowed from
https://github.com/segmentio/analytics-php/blob/master/lib/Analytics/Consumer/Socket.php.</description>
        <long-description>&lt;p&gt;Thanks for the work!&lt;/p&gt;

&lt;p&gt;WWWWWW||WWWWWW
W W W||W W W
||
( OO )__________
/  |           \
/o o|    MIT     \
&amp;#95;__/||_||&lt;strong&gt;||&lt;em&gt;|| *
|| ||  || ||
_||&lt;/em&gt;|| &lt;em&gt;||&lt;/em&gt;||
(&lt;/strong&gt;|&lt;strong&gt;|(&lt;/strong&gt;|__|
(The MIT License)&lt;/p&gt;

&lt;p&gt;Copyright (c) 2013 Segment.io Inc. friends@segment.io&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</long-description>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="39" package="Default">
      <extends>\ConsumerStrategies_AbstractConsumer</extends>
      <name>ConsumerStrategies_SocketConsumer</name>
      <full_name>\ConsumerStrategies_SocketConsumer</full_name>
      <docblock line="36">
        <description>Consumes messages and writes them to host/endpoint using a persistent socket</description>
        <long-description/>
      </docblock>
      <property final="false" static="false" visibility="private" line="44" namespace="global" package="Default">
        <name>$_host</name>
        <default/>
        <docblock line="41">
          <description/>
          <long-description/>
          <tag line="41" name="var" description="the host to connect to (e.g. api.mixpanel.com)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="50" namespace="global" package="Default">
        <name>$_endpoint</name>
        <default/>
        <docblock line="47">
          <description/>
          <long-description/>
          <tag line="47" name="var" description="the host-relative endpoint to write to (e.g. /engage)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="56" namespace="global" package="Default">
        <name>$_timeout</name>
        <default/>
        <docblock line="53">
          <description/>
          <long-description/>
          <tag line="53" name="var" description="timeout the socket connection timeout in seconds" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="62" namespace="global" package="Default">
        <name>$_protocol</name>
        <default/>
        <docblock line="59">
          <description/>
          <long-description/>
          <tag line="59" name="var" description="the protocol to use for the socket connection" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="68" namespace="global" package="Default">
        <name>$_socket</name>
        <default/>
        <docblock line="65">
          <description/>
          <long-description/>
          <tag line="65" name="var" description="holds the socket resource" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="71">
          <description>Creates a new SocketConsumer and assigns properties from the $options array</description>
          <long-description/>
          <tag line="71" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="98" package="Default">
        <name>persist</name>
        <full_name>persist</full_name>
        <docblock line="93">
          <description>Write using a persistent socket connection.</description>
          <long-description/>
          <tag line="93" name="param" description="" type="array" variable="$batch">
            <type by_reference="false">array</type>
          </tag>
          <tag line="93" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$batch</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="124" package="Default">
        <name>_getSocket</name>
        <full_name>_getSocket</full_name>
        <docblock line="120">
          <description>Return cached socket if open or create a new persistent socket</description>
          <long-description/>
          <tag line="120" name="return" description="" type="bool|resource">
            <type by_reference="false">bool</type>
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="147" package="Default">
        <name>_createSocket</name>
        <full_name>_createSocket</full_name>
        <docblock line="142">
          <description>Attempt to open a new socket connection, cache it, and return the resource</description>
          <long-description/>
          <tag line="142" name="param" description="" type="bool" variable="$retry">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="142" name="return" description="" type="bool|resource">
            <type by_reference="false">bool</type>
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$retry</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="173" package="Default">
        <name>_destroySocket</name>
        <full_name>_destroySocket</full_name>
        <docblock line="170">
          <description>Attempt to close and dereference a socket resource</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="187" package="Default">
        <name>_write</name>
        <full_name>_write</full_name>
        <docblock line="180">
          <description>Write $data through the given $socket</description>
          <long-description/>
          <tag line="180" name="param" description="" type="\" variable="$socket"/>
          <tag line="180" name="param" description="" type="\" variable="$data"/>
          <tag line="180" name="param" description="" type="bool" variable="$retry">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="180" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$socket</name>
          <default/>
          <type/>
        </argument>
        <argument line="187">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="187">
          <name>$retry</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="262" package="Default">
        <name>handleResponse</name>
        <full_name>handleResponse</full_name>
        <docblock line="257">
          <description>Parse the response from a socket write (only used for debugging)</description>
          <long-description/>
          <tag line="257" name="param" description="" type="\" variable="$response"/>
          <tag line="257" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="262">
          <name>$response</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ConsumerStrategies/SocketConsumer.php</error>
    </parse_markers>
  </file>
  <file path="Mixpanel.php" hash="ccbee69f52bec3b8459394b8a76cac2d" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="100" package="Default">
      <extends>\Base_MixpanelBase</extends>
      <name>Mixpanel</name>
      <full_name>\Mixpanel</full_name>
      <docblock line="7">
        <description>This is the main class for the Mixpanel PHP Library which provides all of the methods you need to track events and
create/update profiles.</description>
        <long-description>&lt;h2&gt;Architecture&lt;/h2&gt;

&lt;p&gt;This library is built such that all messages are buffered in an in-memory "queue"
The queue will be automatically flushed at the end of every request. Alternatively, you can call "flush()" manually
at any time. Flushed messages will be passed to a Consumer's "persist" method. The library comes with a handful of
Consumers. The "SocketConsumer" is used by default which will send the messages to Mixpanel using a socket.
You can implement your own custom Consumer to customize how a message is sent to Mixpanel. This can be useful when
you want to put messages onto a distributed queue (such as ActiveMQ or Kestrel) instead of writing to Mixpanel in
the user thread.&lt;/p&gt;

&lt;h2&gt;Options&lt;/h2&gt;

&lt;table width="100%" cellpadding="5"&gt;
 &lt;tr&gt;
     &lt;th&gt;Option&lt;/th&gt;
     &lt;th&gt;Description&lt;/th&gt;
     &lt;th&gt;Default&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;max_queue_size&lt;/td&gt;
     &lt;td&gt;The maximum number of items to buffer in memory before flushing&lt;/td&gt;
     &lt;td&gt;1000&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;debug&lt;/td&gt;
     &lt;td&gt;Enable/disable debug mode&lt;/td&gt;
     &lt;td&gt;false&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;consumer&lt;/td&gt;
     &lt;td&gt;The consumer to use for writing messages&lt;/td&gt;
     &lt;td&gt;socket&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;consumers&lt;/td&gt;
     &lt;td&gt;An array of custom consumers in the format array(consumer_key =&gt; class_name)&lt;/td&gt;
     &lt;td&gt;null&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;host&lt;/td&gt;
     &lt;td&gt;The host name for api calls (used by some consumers)&lt;/td&gt;
     &lt;td&gt;api.mixpanel.com&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;events_endpoint&lt;/td&gt;
     &lt;td&gt;The endpoint for tracking events (relative to the host)&lt;/td&gt;
     &lt;td&gt;/events&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;people_endpoint&lt;/td&gt;
     &lt;td&gt;The endpoint for making people updates (relative to the host)&lt;/td&gt;
     &lt;td&gt;/engage&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;use_ssl&lt;/td&gt;
     &lt;td&gt;Tell the consumer whether or not to use ssl (when available)&lt;/td&gt;
     &lt;td&gt;true&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
     &lt;td&gt;error_callback&lt;/td&gt;
     &lt;td&gt;The name of a function to be called on consumption failures&lt;/td&gt;
     &lt;td&gt;null&lt;/td&gt;
 &lt;/tr&gt;

&lt;/table&gt;

&lt;h2&gt;Example: Tracking an Event&lt;/h2&gt;

&lt;p&gt;$mp = Mixpanel::getInstance("MY_TOKEN");&lt;/p&gt;

&lt;p&gt;$mp-&gt;track("My Event");&lt;/p&gt;

&lt;h2&gt;Example: Setting Profile Properties&lt;/h2&gt;

&lt;p&gt;$mp = Mixpanel::getInstance("MY_TOKEN", array("use_ssl" =&gt; false));&lt;/p&gt;

&lt;p&gt;$mp-&gt;people-&gt;set(12345, array(
'$first_name'       =&gt; "John",
'$last_name'        =&gt; "Doe",
'$email'            =&gt; "john.doe@example.com",
'$phone'            =&gt; "5555555555",
'Favorite Color'    =&gt; "red"
));&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="true" visibility="private" line="106" namespace="global" package="Default">
        <name>$_instance</name>
        <default/>
        <docblock line="102">
          <description>An instance of the Mixpanel class (for singleton use)</description>
          <long-description/>
          <tag line="102" name="var" description="" type="\Mixpanel">
            <type by_reference="false">\Mixpanel</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" namespace="global" package="Default">
        <name>$people</name>
        <default/>
        <docblock line="109">
          <description>An instance of the MixpanelPeople class (used to create/update profiles)</description>
          <long-description/>
          <tag line="109" name="var" description="" type="\MixpanelPeople">
            <type by_reference="false">\MixpanelPeople</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="120" namespace="global" package="Default">
        <name>$_events</name>
        <default/>
        <docblock line="116">
          <description>An instance of the MixpanelEvents class</description>
          <long-description/>
          <tag line="116" name="var" description="" type="\Producers_MixpanelEvents">
            <type by_reference="false">\Producers_MixpanelEvents</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="123">
          <description>Instantiates a new Mixpanel instance.</description>
          <long-description>&lt;p&gt;Available options/defaults are:&lt;/p&gt;</long-description>
          <tag line="123" name="param" description="" type="\" variable="$token"/>
          <tag line="123" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
        <argument line="128">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="141" package="Default">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
        <docblock line="135">
          <description>Returns a singleton instance of Mixpanel</description>
          <long-description/>
          <tag line="135" name="param" description="" type="\" variable="$token"/>
          <tag line="135" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="135" name="return" description="" type="\Mixpanel">
            <type by_reference="false">\Mixpanel</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
        <argument line="141">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="153" package="Default">
        <name>enqueue</name>
        <full_name>enqueue</full_name>
        <docblock line="149">
          <description>Add an array representing a message to be sent to Mixpanel to the in-memory queue.</description>
          <long-description/>
          <tag line="149" name="param" description="" type="array" variable="$message">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$message</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="162" package="Default">
        <name>enqueueAll</name>
        <full_name>enqueueAll</full_name>
        <docblock line="158">
          <description>Add an array representing a list of messages to be sent to Mixpanel to a queue.</description>
          <long-description/>
          <tag line="158" name="param" description="" type="array" variable="$messages">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$messages</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="Default">
        <name>flush</name>
        <full_name>flush</full_name>
        <docblock line="167">
          <description>Flush the events queue</description>
          <long-description/>
          <tag line="167" name="param" description="" type="int" variable="$desired_batch_size">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$desired_batch_size</name>
          <default>50</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Default">
        <name>reset</name>
        <full_name>reset</full_name>
        <docblock line="177">
          <description>Empty the events queue</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="191" package="Default">
        <name>track</name>
        <full_name>track</full_name>
        <docblock line="186">
          <description>Track an event defined by $event associated with metadata defined by $properties</description>
          <long-description/>
          <tag line="186" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="param" description="" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$event</name>
          <default/>
          <type/>
        </argument>
        <argument line="191">
          <name>$properties</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="Default">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="197">
          <description>Register a property to be sent with every event.</description>
          <long-description>&lt;p&gt;If the property has already been registered, it will be
overwritten. NOTE: Registered properties are only persisted for the life of the Mixpanel class instance.&lt;/p&gt;</long-description>
          <tag line="197" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
        <argument line="205">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="219" package="Default">
        <name>registerAll</name>
        <full_name>registerAll</full_name>
        <docblock line="211">
          <description>Register multiple properties to be sent with every event.</description>
          <long-description>&lt;p&gt;If any of the properties have already been registered,
they will be overwritten. NOTE: Registered properties are only persisted for the life of the Mixpanel class
instance.&lt;/p&gt;</long-description>
          <tag line="211" name="param" description="" type="array" variable="$props_and_vals">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$props_and_vals</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="233" package="Default">
        <name>registerOnce</name>
        <full_name>registerOnce</full_name>
        <docblock line="225">
          <description>Register a property to be sent with every event.</description>
          <long-description>&lt;p&gt;If the property has already been registered, it will NOT be
overwritten. NOTE: Registered properties are only persisted for the life of the Mixpanel class instance.&lt;/p&gt;</long-description>
          <tag line="225" name="param" description="" type="\" variable="$property"/>
          <tag line="225" name="param" description="" type="\" variable="$value"/>
        </docblock>
        <argument line="233">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
        <argument line="233">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="247" package="Default">
        <name>registerAllOnce</name>
        <full_name>registerAllOnce</full_name>
        <docblock line="239">
          <description>Register multiple properties to be sent with every event.</description>
          <long-description>&lt;p&gt;If any of the properties have already been registered,
they will NOT be overwritten. NOTE: Registered properties are only persisted for the life of the Mixpanel class
instance.&lt;/p&gt;</long-description>
          <tag line="239" name="param" description="" type="array" variable="$props_and_vals">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$props_and_vals</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="257" package="Default">
        <name>unregister</name>
        <full_name>unregister</full_name>
        <docblock line="253">
          <description>Un-register an property to be sent with every event.</description>
          <long-description/>
          <tag line="253" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="267" package="Default">
        <name>unregisterAll</name>
        <full_name>unregisterAll</full_name>
        <docblock line="263">
          <description>Un-register a list of properties to be sent with every event.</description>
          <long-description/>
          <tag line="263" name="param" description="" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="267">
          <name>$properties</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="278" package="Default">
        <name>getProperty</name>
        <full_name>getProperty</full_name>
        <docblock line="273">
          <description>Get a property that is set to be sent with every event</description>
          <long-description/>
          <tag line="273" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="278">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="290" package="Default">
        <name>createAlias</name>
        <full_name>createAlias</full_name>
        <docblock line="284">
          <description>Alias an existing id with a different unique id.</description>
          <long-description>&lt;p&gt;This is helpful when you want to associate a generated id
(such as a session id) to a user id or username.&lt;/p&gt;</long-description>
          <tag line="284" name="param" description="" type="string|int" variable="$original_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="284" name="param" description="" type="string|int" variable="$new_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$original_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="290">
          <name>$new_id</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Mixpanel.php</error>
    </parse_markers>
  </file>
  <file path="Producers/MixpanelBaseProducer.php" hash="eadcc3f68261aefb708b8d4908543ce4" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="true" namespace="global" line="14" package="Default">
      <extends>\Base_MixpanelBase</extends>
      <name>Producers_MixpanelBaseProducer</name>
      <full_name>\Producers_MixpanelBaseProducer</full_name>
      <docblock line="11">
        <description>Provides some base methods for use by a message Producer</description>
        <long-description/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="20" namespace="global" package="Default">
        <name>$_token</name>
        <default/>
        <docblock line="17">
          <description/>
          <long-description/>
          <tag line="17" name="var" description="a token associated to a Mixpanel project" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$_queue</name>
        <default>array()</default>
        <docblock line="23">
          <description/>
          <long-description/>
          <tag line="23" name="var" description="a queue to hold messages in memory before flushing in batches" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$_consumer</name>
        <default>null</default>
        <docblock line="29">
          <description/>
          <long-description/>
          <tag line="29" name="var" description="the consumer to use when flushing messages" type="\ConsumerStrategies_AbstractConsumer">
            <type by_reference="false">\ConsumerStrategies_AbstractConsumer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="global" package="Default">
        <name>$_consumers</name>
        <default>array("file" =&gt; "ConsumerStrategies_FileConsumer", "curl" =&gt; "ConsumerStrategies_CurlConsumer", "socket" =&gt; "ConsumerStrategies_SocketConsumer")</default>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="var" description="The list of available consumers" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" namespace="global" package="Default">
        <name>$_max_queue_size</name>
        <default>1000</default>
        <docblock line="45">
          <description>If the queue reaches this size we'll auto-flush to prevent out of memory errors</description>
          <long-description/>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="52">
          <description>Creates a new MixpanelBaseProducer, assings Mixpanel project token, registers custom Consumers, and instantiates
the desired consumer</description>
          <long-description/>
          <tag line="52" name="param" description="" type="\" variable="$token"/>
          <tag line="52" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Default">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
        <docblock line="80">
          <description>Flush the queue when we destruct the client with retries</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Default">
        <name>flush</name>
        <full_name>flush</full_name>
        <docblock line="97">
          <description>Iterate the queue and write in batches using the instantiated Consumer Strategy</description>
          <long-description/>
          <tag line="97" name="param" description="" type="int" variable="$desired_batch_size">
            <type by_reference="false">int</type>
          </tag>
          <tag line="97" name="return" description="whether or not the flush was successful" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$desired_batch_size</name>
          <default>50</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Default">
        <name>reset</name>
        <full_name>reset</full_name>
        <docblock line="138">
          <description>Empties the queue without persisting any of the messages</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="150" package="Default">
        <name>getQueue</name>
        <full_name>getQueue</full_name>
        <docblock line="146">
          <description>Returns the in-memory queue</description>
          <long-description/>
          <tag line="146" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="Default">
        <name>getToken</name>
        <full_name>getToken</full_name>
        <docblock line="154">
          <description>Returns the current Mixpanel project token</description>
          <long-description/>
          <tag line="154" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="167" package="Default">
        <name>_getConsumer</name>
        <full_name>_getConsumer</full_name>
        <docblock line="163">
          <description>Given a strategy type, return a new PersistenceStrategy object</description>
          <long-description/>
          <tag line="163" name="return" description="" type="\ConsumerStrategies_AbstractConsumer">
            <type by_reference="false">\ConsumerStrategies_AbstractConsumer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="183" package="Default">
        <name>enqueue</name>
        <full_name>enqueue</full_name>
        <docblock line="179">
          <description>Add an array representing a message to be sent to Mixpanel to a queue.</description>
          <long-description/>
          <tag line="179" name="param" description="" type="array" variable="$message">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="183">
          <name>$message</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="Default">
        <name>enqueueAll</name>
        <full_name>enqueueAll</full_name>
        <docblock line="197">
          <description>Add an array representing a list of messages to be sent to Mixpanel to a queue.</description>
          <long-description/>
          <tag line="197" name="param" description="" type="array" variable="$messages">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$messages</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="214" package="Default">
        <name>_persist</name>
        <full_name>_persist</full_name>
        <docblock line="209">
          <description>Given an array of messages, persist it with the instantiated Persistence Strategy</description>
          <long-description/>
          <tag line="209" name="param" description="" type="\" variable="$message"/>
          <tag line="209" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="global" line="225" package="Default">
        <name>_getEndpoint</name>
        <full_name>_getEndpoint</full_name>
        <docblock line="221">
          <description>Return the endpoint that should be used by a consumer that consumes messages produced by this producer.</description>
          <long-description/>
          <tag line="221" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Producers/MixpanelBaseProducer.php</error>
    </parse_markers>
  </file>
  <file path="Producers/MixpanelEvents.php" hash="f36921a737e9f170b9e77aa1ddf272ce" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\Producers_MixpanelBaseProducer</extends>
      <name>Producers_MixpanelEvents</name>
      <full_name>\Producers_MixpanelEvents</full_name>
      <docblock line="5">
        <description>Provides an API to track events on Mixpanel</description>
        <long-description/>
      </docblock>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$_super_properties</name>
        <default>array()</default>
        <docblock line="10">
          <description>An array of properties to attach to every tracked event</description>
          <long-description/>
          <tag line="10" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Default">
        <name>track</name>
        <full_name>track</full_name>
        <docblock line="17">
          <description>Track an event defined by $event associated with metadata defined by $properties</description>
          <long-description/>
          <tag line="17" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="22">
          <name>$event</name>
          <default/>
          <type/>
        </argument>
        <argument line="22">
          <name>$properties</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="37">
          <description>Register a property to be sent with every event.</description>
          <long-description>&lt;p&gt;If the property has already been registered, it will be
overwritten.&lt;/p&gt;</long-description>
          <tag line="37" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
        <argument line="43">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="Default">
        <name>registerAll</name>
        <full_name>registerAll</full_name>
        <docblock line="48">
          <description>Register multiple properties to be sent with every event.</description>
          <long-description>&lt;p&gt;If any of the properties have already been registered,
they will be overwritten.&lt;/p&gt;</long-description>
          <tag line="48" name="param" description="" type="array" variable="$props_and_vals">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$props_and_vals</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Default">
        <name>registerOnce</name>
        <full_name>registerOnce</full_name>
        <docblock line="60">
          <description>Register a property to be sent with every event.</description>
          <long-description>&lt;p&gt;If the property has already been registered, it will NOT be
overwritten.&lt;/p&gt;</long-description>
          <tag line="60" name="param" description="" type="\" variable="$property"/>
          <tag line="60" name="param" description="" type="\" variable="$value"/>
        </docblock>
        <argument line="66">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Default">
        <name>registerAllOnce</name>
        <full_name>registerAllOnce</full_name>
        <docblock line="73">
          <description>Register multiple properties to be sent with every event.</description>
          <long-description>&lt;p&gt;If any of the properties have already been registered,
they will NOT be overwritten.&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="" type="array" variable="$props_and_vals">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$props_and_vals</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>unregister</name>
        <full_name>unregister</full_name>
        <docblock line="87">
          <description>Un-register an property to be sent with every event.</description>
          <long-description/>
          <tag line="87" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>unregisterAll</name>
        <full_name>unregisterAll</full_name>
        <docblock line="96">
          <description>Un-register a list of properties to be sent with every event.</description>
          <long-description/>
          <tag line="96" name="param" description="" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$properties</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>getProperty</name>
        <full_name>getProperty</full_name>
        <docblock line="107">
          <description>Get a property that is set to be sent with every event</description>
          <long-description/>
          <tag line="107" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Default">
        <name>createAlias</name>
        <full_name>createAlias</full_name>
        <docblock line="117">
          <description>Alias an existing id with a different unique id.</description>
          <long-description>&lt;p&gt;This is helpful when you want to associate a generated id to
a username or e-mail address.&lt;/p&gt;</long-description>
          <tag line="117" name="param" description="" type="string|int" variable="$original_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="117" name="param" description="" type="string|int" variable="$new_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$original_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="123">
          <name>$new_id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="Default">
        <name>_getEndpoint</name>
        <full_name>_getEndpoint</full_name>
        <docblock line="131">
          <description>Returns the "events" endpoint</description>
          <long-description/>
          <tag line="131" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Producers/MixpanelEvents.php</error>
    </parse_markers>
  </file>
  <file path="Producers/MixpanelPeople.php" hash="65e04ab62c26bcbc65c36dbf51a68b2c" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\Producers_MixpanelBaseProducer</extends>
      <name>Producers_MixpanelPeople</name>
      <full_name>\Producers_MixpanelPeople</full_name>
      <docblock line="4">
        <description>Provides an API to create/update profiles on Mixpanel</description>
        <long-description/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="17" package="Default">
        <name>_constructPayload</name>
        <full_name>_constructPayload</full_name>
        <docblock line="9">
          <description>Internal method to prepare a message given the message data</description>
          <long-description/>
          <tag line="9" name="param" description="" type="\" variable="$distinct_id"/>
          <tag line="9" name="param" description="" type="\" variable="$operation"/>
          <tag line="9" name="param" description="" type="\" variable="$value"/>
          <tag line="9" name="param" description="" type="null" variable="$ip">
            <type by_reference="false">null</type>
          </tag>
          <tag line="9" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="17">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="17">
          <name>$operation</name>
          <default/>
          <type/>
        </argument>
        <argument line="17">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="17">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>set</name>
        <full_name>set</full_name>
        <docblock line="27">
          <description>Set properties on a user record.</description>
          <long-description>&lt;p&gt;If the profile does not exist, it creates it with these properties.
If it does exist, it sets the properties to these values, overwriting existing values.&lt;/p&gt;</long-description>
          <tag line="27" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="27" name="param" description="associative array of properties to set on the profile" type="array" variable="$props">
            <type by_reference="false">array</type>
          </tag>
          <tag line="27" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="34">
          <name>$props</name>
          <default/>
          <type/>
        </argument>
        <argument line="34">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Default">
        <name>setOnce</name>
        <full_name>setOnce</full_name>
        <docblock line="39">
          <description>Set properties on a user record.</description>
          <long-description>&lt;p&gt;If the profile does not exist, it creates it with these properties.
If it does exist, it sets the properties to these values but WILL NOT overwrite existing values.&lt;/p&gt;</long-description>
          <tag line="39" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="39" name="param" description="associative array of properties to set on the profile" type="array" variable="$props">
            <type by_reference="false">array</type>
          </tag>
          <tag line="39" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$props</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>increment</name>
        <full_name>increment</full_name>
        <docblock line="51">
          <description>Increments the value of a property on a user record.</description>
          <long-description>&lt;p&gt;If the profile does not exist, it creates it and sets the
property to the increment value.&lt;/p&gt;</long-description>
          <tag line="51" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="51" name="param" description="string the property to increment" type="\" variable="$prop"/>
          <tag line="51" name="param" description="the amount to increment the property by" type="int" variable="$val">
            <type by_reference="false">int</type>
          </tag>
          <tag line="51" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>append</name>
        <full_name>append</full_name>
        <docblock line="64">
          <description>Adds $val to a list located at $prop.</description>
          <long-description>&lt;p&gt;If the property does not exist, it will be created. If $val is a string
and the list is empty or does not exist, a new list with one value will be created.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="64" name="param" description="the property that holds the list" type="string" variable="$prop">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="items to add to the list" type="string|array" variable="$val">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="64" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$prop</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$val</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>trackCharge</name>
        <full_name>trackCharge</full_name>
        <docblock line="78">
          <description>Adds a transaction to the user's profile for revenue tracking</description>
          <long-description/>
          <tag line="78" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="78" name="param" description="the transaction amount e.g. &quot;20.50&quot;" type="string" variable="$amount">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="the timestamp of when the transaction occurred (default to current timestamp)" type="null" variable="$timestamp">
            <type by_reference="false">null</type>
          </tag>
          <tag line="78" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="85">
          <name>$amount</name>
          <default/>
          <type/>
        </argument>
        <argument line="85">
          <name>$timestamp</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="85">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Default">
        <name>clearCharges</name>
        <full_name>clearCharges</full_name>
        <docblock line="97">
          <description>Clear all transactions stored on a user's profile</description>
          <long-description/>
          <tag line="97" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="97" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="102">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>deleteUser</name>
        <full_name>deleteUser</full_name>
        <docblock line="107">
          <description>Delete this profile from Mixpanel</description>
          <long-description/>
          <tag line="107" name="param" description="the distinct_id or alias of a user" type="string|int" variable="$distinct_id">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="107" name="param" description="the ip address of the client (used for geo-location)" type="string|null" variable="$ip">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$distinct_id</name>
          <default/>
          <type/>
        </argument>
        <argument line="112">
          <name>$ip</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>_getEndpoint</name>
        <full_name>_getEndpoint</full_name>
        <docblock line="117">
          <description>Returns the "engage" endpoint</description>
          <long-description/>
          <tag line="117" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Producers/MixpanelPeople.php</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="global" full_name="global"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
